require 'lib/iso8583'
require 'lib/berlin'
require 'test/unit'

class MessageTest < Test::Unit::TestCase
	def test_create_empty
	  mes = BerlinMessage.new
    pan = 474747474747
    mes.pan = pan
    assert_equal pan, mes.pan
    assert_equal pan, mes[2]
    assert_equal pan, mes["Primary Account Number (PAN)"]
    assert_equal "@\000\000\000\000\000\000\00012474747474747", mes.to_b

    mes = BerlinMessage.new
    pan = 474747474747
    mes[2] = pan
    assert_equal pan, mes.pan
    assert_equal pan, mes[2]
    assert_equal pan, mes["Primary Account Number (PAN)"]
    assert_equal "@\000\000\000\000\000\000\00012474747474747", mes.to_b

    mes = BerlinMessage.new
    pan = 474747474747
    mes["Primary Account Number (PAN)"] = pan
    assert_equal pan, mes.pan
    assert_equal pan, mes[2]
    assert_equal pan, mes["Primary Account Number (PAN)"]
    assert_equal "@\000\000\000\000\000\000\00012474747474747", mes.to_b
	end

	def test_parse
    pan = 474747474747
	  mes = BerlinMessage.parse "@\000\000\000\000\000\000\00012474747474747"
    assert_equal pan, mes.pan
  end

	def test_parse_bmp
		# 0000000001001001001001001001001001001001001001001001001001000000
		# generated by: 10.step(60,3) {|i| mp.set(i)}

		tst = "\x00\x49\x24\x92\x49\x24\x92\x40"
		b = Bitmap.new tst
		10.step(60,3) {|i| 
			assert(b[i], "bit #{i} is not set.")
			assert(!b[i+i], "bit #{i+i} is set.")
		}

		#10000000000000000001000000100000010000001000000100000010000001000000100000010000001000000100000010000001000000100000010000001000
		# generated by: 20.step(128,7) {|i| mp.set(i)}
		tst = "\x80\x00\x10\x20\x40\x81\x02\x04\x08\x10\x20\x40\x81\x02\x04\x08"
		b = Bitmap.new tst
		20.step(128,7) {|i|
			assert(b[i], "bit #{i} is not set. (128 bit map)")
			assert(!b[i+i], "bit #{i+i} is set. (128 bit map)")
		}
	end


end
	
